/*
 * Copyright 2020, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.example.airport.security;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.example.airport.tl.passengers";
option java_outer_classname = "SecurityProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "spine/time_options.proto";
import "spine/example/airport/tl/flight.proto";

message TsaPassengers {
    repeated TsaPassenger passenger = 1;
}

// A passenger, as seen by the `Security Checks` context.
//
message TsaPassenger {
    option (is).java_type = "TsaPassengerMixin";

    string id = 1 [(required) = true];
    string fullName = 2;
    string flightNumber = 3;
    Status status = 4 [(required) = true];
    google.protobuf.Timestamp encounteredAt = 5 [(required) = true, (when).in = PAST];

    enum Status {

        TPS_UNKNOWN = 0;
        NOT_ATTEMPTED = 1;
        PASSED = 2;
        DENIED = 3;
        DETAINED = 4;
    }
}

message PassengerId {

    string value = 1 [(required) = true];
}

// State of the precess of boarding a plane.
message Boarding {
    option (entity).kind = PROCESS_MANAGER;

    tl.FlightId flight_id = 1;

    uint32 expected_passengers = 2;

    repeated PassengerId boarded = 3;

    repeated PassengerId will_not_be_boarded = 4;
}

enum BoardingStatus {

    NOT_BOARDED = 0;
    BOARDED = 1;
    WILL_NOT_BE_BOARDED = 2;
}
